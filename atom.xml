<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://haidalu.github.io</id>
    <title>ChezEliooreux</title>
    <updated>2021-06-08T09:49:00.008Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://haidalu.github.io"/>
    <link rel="self" href="https://haidalu.github.io/atom.xml"/>
    <subtitle>Welcome to chezEliooreux</subtitle>
    <logo>https://haidalu.github.io/images/avatar.png</logo>
    <icon>https://haidalu.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, ChezEliooreux</rights>
    <entry>
        <title type="html"><![CDATA[Lecture 3. Reference, Recursion, and Lists]]></title>
        <id>https://haidalu.github.io/post/lecture-3-reference-recursion-and-lists/</id>
        <link href="https://haidalu.github.io/post/lecture-3-reference-recursion-and-lists/">
        </link>
        <updated>2021-06-08T09:43:39.000Z</updated>
        <content type="html"><![CDATA[<h1 id="reference-recursion-and-lists">Reference, Recursion, and Lists</h1>
<blockquote>
<p>Summary</p>
</blockquote>
<hr>
<p>There are 9 types of variable in Java:</p>
<ul>
<li>8 primitive types(byte, short, int, long, float, double, Boolean, char)</li>
<li>The 9th type is references to Objects(an arrow). References may be null</li>
</ul>
<p>In box-and-pointer notation, each variable is drawn as a labeled box and values are shown in the box</p>
<ul>
<li>Addresses are représentâtes by arrows to object instances.</li>
</ul>
<figure data-type="image" tabindex="1"><img src="Reference,%20Recursion,%20and%20Lists%202315a535d115471a97f376fb3d5dfdfb/2021-06-08_10.28.30.png" alt="Reference,%20Recursion,%20and%20Lists%202315a535d115471a97f376fb3d5dfdfb/2021-06-08_10.28.30.png" loading="lazy"></figure>
<p>The golden rule:</p>
<ul>
<li>b = a copies the bits from a into b.</li>
<li>Passing parameters copies the bits.</li>
</ul>
<hr>
<hr>
<h2 id="1-基础类型primitive-type和引用类型-reference-type">1. 基础类型Primitive Type和引用类型 Reference  Type</h2>
<ul>
<li>
<p>There are 8 primitive types in Java</p>
<ul>
<li>byte, short, ont ,long, float, double, Boolean, char</li>
</ul>
</li>
</ul>
<p>Everything else, including arrays, is a reference type.</p>
<hr>
<h3 id="class-instantiations">Class Instantiations</h3>
<p>When we instantiate on Object(e.g. Dog, Walrus, Planet):</p>
<ul>
<li>Java first allocates a box of bits for each instance variable of the class and fills them with a default value(e.g. 0, null)</li>
<li>The constructor then usually fills every such box with some other value.</li>
</ul>
<hr>
<h3 id="reference-type-variable-declarations-引用类型变量声明">Reference Type Variable Declarations 引用类型变量声明</h3>
<p>When we declare a variable of any reference type(Walrus, Dog, Planet):</p>
<ol>
<li>
<p>Java allocates exactly a box of size 64 bits, no matter what type of object.</p>
</li>
<li>
<p>These bits can be either set to:</p>
<ul>
<li>
<p>Null (All zeros)</p>
</li>
<li>
<p>The 64 bit “address” of a specific instance of that class(returned by new)</p>
</li>
</ul>
<figure data-type="image" tabindex="2"><img src="Reference,%20Recursion,%20and%20Lists%202315a535d115471a97f376fb3d5dfdfb/2021-06-08_10.06.45.png" alt="Reference,%20Recursion,%20and%20Lists%202315a535d115471a97f376fb3d5dfdfb/2021-06-08_10.06.45.png" loading="lazy"></figure>
</li>
</ol>
<h3 id=""></h3>
<p>The 64 bit address are meaningless to us as humans, so we’ll represent:</p>
<ul>
<li>All zero addresses with “null”</li>
<li>Non-zero addresses as arrows.</li>
</ul>
<p>This is sometimes called “box and pointer” notation.</p>
<figure data-type="image" tabindex="3"><img src="Reference,%20Recursion,%20and%20Lists%202315a535d115471a97f376fb3d5dfdfb/2021-06-08_10.09.42.png" alt="Reference,%20Recursion,%20and%20Lists%202315a535d115471a97f376fb3d5dfdfb/2021-06-08_10.09.42.png" loading="lazy"></figure>
<h3 id="reference-types-obey-the-golden-rule-of-equals">Reference Types Obey the Golden Rule of Equals</h3>
<p>Just as with primitive types, the equals sign copies the bits</p>
<ul>
<li>In terms of our visual metaphor, we “copy” the arrow by making the arrow in the b box point at the same instance as a.</li>
</ul>
<p></p>
<pre><code class="language-java">Walrus a;
a = new Walrus(1000, 8.3);
Walrus b;
b = a;
</code></pre>
<figure data-type="image" tabindex="4"><img src="Reference,%20Recursion,%20and%20Lists%202315a535d115471a97f376fb3d5dfdfb/2021-06-08_10.12.57.png" alt="Reference,%20Recursion,%20and%20Lists%202315a535d115471a97f376fb3d5dfdfb/2021-06-08_10.12.57.png" loading="lazy"></figure>
<h3 id="the-golden-rule-of-equals-and-parameter-passing">The Golden Rule of Equals( and Parameter Passing)</h3>
<p>Given variables b and a:</p>
<ul>
<li>b = a copies all the bits from a into b.</li>
</ul>
<p>Passing parameters obeys the same rule: Simply copy the bits to the new scope</p>
<pre><code class="language-java">public static double average(double a, double b){
	return (a+b) / 2;
}

public static void main(String[] args){
	double x = 5.5;
	double y = 10.5;
	double avg = average(x,y);
}
</code></pre>
<h2 id="2-实例化数组declaration-instantiation-assignment">2. 实例化数组(Declaration instantiation assignment)</h2>
<p>Assignment of Arrays</p>
<p><code>int[] a = new int[]{0,1,2,95,4};</code></p>
<ul>
<li>Créâtes a 64 bit box for storing an int array address. Declaration</li>
<li>Creates a new Object, in this case an int array.(instantiation)</li>
<li>Puts the address of this new Object into the 63 bit box named a.(assignment)</li>
</ul>
<p>Note: Instantiated objects can be lost!</p>
<ul>
<li>
<p>If we were to reassign a to something else, we’d never be able to get the original Object back!</p>
<figure data-type="image" tabindex="5"><img src="Reference,%20Recursion,%20and%20Lists%202315a535d115471a97f376fb3d5dfdfb/2021-06-08_10.43.55.png" alt="Reference,%20Recursion,%20and%20Lists%202315a535d115471a97f376fb3d5dfdfb/2021-06-08_10.43.55.png" loading="lazy"></figure>
</li>
</ul>
<h2 id="3-introducing-intlists">3. Introducing IntLists</h2>
<h3 id="31-链表创建">3.1 链表创建</h3>
<p>Let’s define an IntList as an object containing two member variables:</p>
<ul>
<li>
<p><code>int first;</code></p>
</li>
<li>
<p><code>IntList rest;</code></p>
</li>
<li>
<p>基础的链表写法:</p>
</li>
</ul>
<pre><code class="language-java">public class IntList {
    public int first;
    public IntList rest;        

    public IntList(int f, IntList r) {
        first = f;
        rest = r;
    }
}
</code></pre>
<ul>
<li>创建5→ 10→ 15 的链表的方法</li>
</ul>
<p>（1）</p>
<figure data-type="image" tabindex="6"><img src="Reference,%20Recursion,%20and%20Lists%202315a535d115471a97f376fb3d5dfdfb/2021-06-08_10.55.44.png" alt="Reference,%20Recursion,%20and%20Lists%202315a535d115471a97f376fb3d5dfdfb/2021-06-08_10.55.44.png" loading="lazy"></figure>
<p>（2）</p>
<pre><code class="language-java">public class IntList{
	public int first;
	public IntList rest;
	
	public IntList(int f, IntList r){
		first = f;
		rest = r;
	
	}

	public static void main(String[] args){
		IntList L = new IntList(15, null);
		L = new IntList(10, L);
		L = new IntList(5,L);  

	}
}
</code></pre>
<h3 id="2-get-size-方法">2. Get size 方法</h3>
<p>And define two versions of the same method:</p>
<ul>
<li>
<p><code>size()</code> 递归方法</p>
</li>
<li>
<p><code>iternativeSize()</code>迭代方法</p>
<pre><code class="language-java">public class IntList{
	public int first;
	public IntList rest;
	
	public IntList(int f, IntList r){
		first = f;
		rest = r;
	
	}

	/** Return the size of the list using ... Recursion!! */
	public int size(){
		if(rest == null){
			return 1;
		}  // Recursion: 首先定好不再迭代时的条件
                                                                                                                                                                                             
		return 1 + this.rest.size();
	}
	
	/** Return the size of the list using no recursion! */
	public int iterativeSize(){
		IntList p = this;
		int totalSize = 0;
		while(p!=null){
			totalSize += 1;
			p = p.rest;
	}
	return totalSize;
}

	public static void main(String[] args){
		IntList L = new IntList(15, null);
		L = new IntList(10, L);
		L = new IntList(5,L);  
		
		System.out.println(L.size());
		System.out.println(L.iterativeSize());
	}
}
</code></pre>
</li>
</ul>
<h3 id="3-getint-i方法返回列表里第i个item">3. Get(int i)方法返回列表里第i个item</h3>
<p>Write a method int get(int i) that returns the itch item in the list.</p>
<ul>
<li>For simplicity, OK to assume the item exists.</li>
<li>Front item is the oth item.</li>
</ul>
<figure data-type="image" tabindex="7"><img src="Reference,%20Recursion,%20and%20Lists%202315a535d115471a97f376fb3d5dfdfb/2021-06-08_11.38.11.png" alt="Reference,%20Recursion,%20and%20Lists%202315a535d115471a97f376fb3d5dfdfb/2021-06-08_11.38.11.png" loading="lazy"></figure>
<pre><code class="language-java">public class IntList{
	public int first;
	public IntList rest;
	
	public IntList(int f, IntList r){
		first = f;
		rest = r;
	
	}
	/** Returns the ith rest of this IntList using ... Recursion*/
	public int get(int i){
			if(i == 0){
				return first;
		}
		return rest.get(i - 1);

	}
	/** Return the size of the list using ... Recursion!! */
	public int size(){
		if(rest == null){
			return 1;
		}  // Recursion: 首先定好不再迭代时的条件
                                                                                                                                                                                             
		return 1 + this.rest.size();
	}
	
	/** Return the size of the list using no recursion! */
	public int iterativeSize(){
		IntList p = this;
		int totalSize = 0;
		while(p!=null){
			totalSize += 1;
			p = p.rest;
	}
	return totalSize;
}

	public static void main(String[] args){
		IntList L = new IntList(15, null);
		L = new IntList(10, L);
		L = new IntList(5,L);  
		
		System.out.println(L.size());
		System.out.println(L.iterativeSize());
	}
}
</code></pre>
<h3 id="4-extraexercise-使链表每项firstn">4. ExtraExercise 使链表每项first+n:</h3>
<p>1.<code>public static IntList incrList(IntList L, int x)</code></p>
<p>new, 不改变原链表</p>
<ul>
<li>Returns an IntList identical to L, but with<br>
each element incremented by x.</li>
<li>L is not allowed to change.</li>
</ul>
<p>2.<code>public static IntList dincrList(IntList L, int x)</code></p>
<p>不new，改变原链表</p>
<ul>
<li>Returns an IntList identical to L, but with all values incremented by x</li>
<li>Not allowed to use 'new'(to save money)</li>
</ul>
<p><a href="Reference,%20Recursion,%20and%20Lists%202315a535d115471a97f376fb3d5dfdfb/2021-06-08_17.19.09.mov">Reference,%20Recursion,%20and%20Lists%202315a535d115471a97f376fb3d5dfdfb/2021-06-08_17.19.09.mov</a></p>
<p>incrList 过程</p>
<pre><code class="language-java">/** Returns an IntList identical to L, but with each element incremented by x. 
		L is not allowed to change. */
    public static IntList incrList(IntList L, int x){

        if(L == null){
            return null;
        }else{
            return new IntList(L.first + x, incrList(L.rest, x)); //recursion, 把L.rest重复copy到L
        }
    }

  /**
   * Returns an IntList identical to L, but with all values incremented by x.
     Not allowed to use 'new'(to save money) */
    public static IntList dincrList(IntList L, int x){
        if(L == null){
            return null;
        }else{
            L.first = L.first+x;
            L.rest = incrList(L.rest, x);
            // recursion 需要破坏L所以不能用new直接返回新的列表，需要改变L中的item之后再返回L//
        }
        return L;

    }
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[4.26 Tencent Interview Summary]]></title>
        <id>https://haidalu.github.io/post/426-tencent-interview-summary/</id>
        <link href="https://haidalu.github.io/post/426-tencent-interview-summary/">
        </link>
        <updated>2021-04-28T03:18:58.000Z</updated>
        <content type="html"><![CDATA[<h1 id="tencent-interview-for-front-end">Tencent Interview for front-end</h1>
<blockquote>
<p>简历涉及<strong>安全</strong>相关，前端相关经验缺乏。导致hr对安全考察更多，对VPN项目更感兴趣，对宠物社交app🈚️兴趣</p>
</blockquote>
<h3 id="tcp的连接与断开过程-三次握手与四次挥手">TCP的连接与断开过程 - 三次握手与四次挥手</h3>
<h3 id="web涉及到的通信协议及其相应的端口">Web涉及到的通信协议及其相应的端口</h3>
]]></content>
    </entry>
</feed>